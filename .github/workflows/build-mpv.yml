name: Build LGPL mpv Multi-Arch

on:
  schedule:
    - cron: '0 0 1 * *'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    strategy:
      matrix:
        arch: [amd64, arm64, armhf]

    steps:
      - uses: actions/checkout@v4
      - name: Fetch all tags
        run: git fetch --tags

      - name: Check for new release and fetch current version
        id: check_version
        run: |
          LATEST_MPV_TAG=$(curl -s "https://api.github.com/repos/mpv-player/mpv/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          
          if git tag --points-at HEAD | grep -q .; then
            CURRENT_RELEASE_TAG=$(git describe --tags --abbrev=0)
            echo "Current release tag: $CURRENT_RELEASE_TAG"
          else
            CURRENT_RELEASE_TAG=""
            echo "No existing tags found in your repository."
          fi

          echo "Latest mpv tag: $LATEST_MPV_TAG"

          if [ "$LATEST_MPV_TAG" != "$CURRENT_RELEASE_TAG" ]; then
            echo "A new version of mpv is available. Proceeding with the build."
            echo "BUILD_REQUIRED=true" >> "$GITHUB_ENV"
            echo "NEW_TAG=$LATEST_MPV_TAG" >> "$GITHUB_ENV"
          else
            echo "No new version available. Exiting."
            echo "BUILD_REQUIRED=false" >> "$GITHUB_ENV"
          fi

      - name: Skip build if no new version
        if: env.BUILD_REQUIRED == 'false'
        run: |
          echo "Skipping build as no new version is available."
          exit 0

      - name: Set up QEMU
        if: matrix.arch != 'amd64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Install dependencies for ${{ matrix.arch }}
        run: |
          sudo apt update
          sudo apt install -y build-essential git meson ninja-build devscripts \
              libavcodec-dev libavfilter-dev libavformat-dev libswscale-dev libswresample-dev \
              libjpeg-dev libx11-dev libxext-dev libxinerama-dev libfreetype6-dev libfontconfig-dev \
              libfribidi-dev libharfbuzz-dev libass-dev

      - name: Build and install libplacebo for ${{ matrix.arch }}
        run: |
          git clone --depth=1 --recursive https://github.com/haasn/libplacebo.git
          cd libplacebo
          meson setup build
          sudo ninja -C build install

      - name: Get mpv source for ${{ matrix.arch }}
        run: git clone --depth=1 https://github.com/mpv-player/mpv.git

      - name: Configure and build mpv with LGPL option for ${{ matrix.arch }}
        run: |
          cd mpv
          meson setup build -Dgpl=false
          ninja -C build

      - name: Create deb package with dpkg-deb for ${{ matrix.arch }}
        id: create_package
        run: |
          MPV_TAG_FULL=$(curl -s "https://api.github.com/repos/mpv-player/mpv/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          MPV_VERSION=$(echo "$MPV_TAG_FULL" | sed 's/^v//')

          if [ -z "$MPV_VERSION" ]; then
            echo "Error: Failed to retrieve MPV version. Exiting."
            exit 1
          fi

          DEB_PACKAGE_NAME="mpv-lgpl_${MPV_VERSION}-1_${{ matrix.arch }}.deb"
          DEB_DIR="debian_pkg"
          MPV_BUILD_DIR="mpv/build"

          mkdir -p "$DEB_DIR/usr/local/bin"
          mkdir -p "$DEB_DIR/usr/local/lib/${{ matrix.arch }}-linux-gnu"
          mkdir -p "$DEB_DIR/DEBIAN"

          cp "$MPV_BUILD_DIR/mpv" "$DEB_DIR/usr/local/bin/"
          cp "$MPV_BUILD_DIR/libmpv.so.2.5.0" "$DEB_DIR/usr/local/lib/${{ matrix.arch }}-linux-gnu/"

          (cd "$DEB_DIR/usr/local/lib/${{ matrix.arch }}-linux-gnu/" && ln -s libmpv.so.2.5.0 libmpv.so.2)
          (cd "$DEB_DIR/usr/local/lib/${{ matrix.arch }}-linux-gnu/" && ln -s libmpv.so.2 libmpv.so)

          cat > "$DEB_DIR/DEBIAN/control" <<EOF
          Package: mpv-lgpl
          Version: ${MPV_VERSION}
          Section: video
          Priority: optional
          Architecture: ${{ matrix.arch }}
          Maintainer: Your Name <your.email@example.com>
          Description: A media player LGPLv2.1 or later.
           mpv is a free and open-source command-line media player.
           This package is built with LGPLv2.1+ only files.
          Depends: libavcodec-dev, libavfilter-dev, libavformat-dev, libswresample-dev, libswscale-dev, libjpeg-dev, libx11-dev, libxext-dev, libxinerama-dev, libfreetype6-dev, libfontconfig-dev, libfribidi-dev, libharfbuzz-dev, libass-dev
          EOF

          dpkg-deb --build "$DEB_DIR" "$DEB_PACKAGE_NAME"
          echo "deb_path=$DEB_PACKAGE_NAME" >> "$GITHUB_OUTPUT"
      
      - name: Create GitHub Release and Upload Asset
        if: env.BUILD_REQUIRED == 'true' && matrix.arch == 'amd64'
        id: release_and_upload
        run: |
          DEB_PATH="${{ steps.create_package.outputs.deb_path }}"
          TAG_NAME="${{ env.NEW_TAG }}"
          REPO_NAME="${{ github.repository }}"
          GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}"
          UPLOAD_URL=""

          # Only create the release once (using amd64 job)
          RELEASE_RESPONSE=$(curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" -H "Content-Type: application/json" -d "{
            \"tag_name\": \"$TAG_NAME\",
            \"name\": \"Release $TAG_NAME\",
            \"draft\": false,
            \"prerelease\": false
          }" "https://api.github.com/repos/$REPO_NAME/releases")
          
          echo "$RELEASE_RESPONSE" | grep -q "upload_url"
          if [ $? -ne 0 ]; then
            echo "Release creation failed. Checking for existing release..."
            RELEASE_RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$REPO_NAME/releases/tags/$TAG_NAME")
          fi

          UPLOAD_URL=$(echo "$RELEASE_RESPONSE" | grep '"upload_url":' | sed -E 's/.*"([^"]+)".*/\1/' | sed 's/{?name,label}//')

          if [ -z "$UPLOAD_URL" ]; then
            echo "Error: Failed to get upload URL."
            echo "$RELEASE_RESPONSE"
            exit 1
          fi

          # Upload the release asset
          curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
          -H "Content-Type: application/vnd.debian.binary-package" \
          --data-binary "@$DEB_PATH" \
          "$UPLOAD_URL?name=$(basename "$DEB_PATH")"

      - name: Upload Release Asset (for non-amd64 jobs)
        if: env.BUILD_REQUIRED == 'true' && matrix.arch != 'amd64'
        run: |
          DEB_PATH="${{ steps.create_package.outputs.deb_path }}"
          TAG_NAME="${{ env.NEW_TAG }}"
          REPO_NAME="${{ github.repository }}"
          GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}"

          # Get upload URL from the existing release
          RELEASE_RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$REPO_NAME/releases/tags/$TAG_NAME")
          UPLOAD_URL=$(echo "$RELEASE_RESPONSE" | grep '"upload_url":' | sed -E 's/.*"([^"]+)".*/\1/' | sed 's/{?name,label}//')

          if [ -z "$UPLOAD_URL" ]; then
            echo "Error: Failed to get upload URL from existing release."
            exit 1
          fi

          # Upload the release asset
          curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
          -H "Content-Type: application/vnd.debian.binary-package" \
          --data-binary "@$DEB_PATH" \
          "$UPLOAD_URL?name=$(basename "$DEB_PATH")"

build_macos:
    runs-on: macos-latest
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v4
      - name: Fetch all tags
        run: git fetch --tags

      - name: Check if macOS package for current version exists
        id: check_macos_pkg
        run: |
          LATEST_MPV_TAG=$(curl -s "https://api.github.com/repos/mpv-player/mpv/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          PKG_NAME="mpv-lgpl-$(echo $LATEST_MPV_TAG | sed 's/^v//')-macos-arm64.tar.gz"
          
          # Check if the release tag exists in our repository
          RELEASE_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://api.github.com/repos/${{ github.repository }}/releases/tags/$LATEST_MPV_TAG")
          
          if [ "$RELEASE_STATUS" -ne 200 ]; then
            echo "Release tag $LATEST_MPV_TAG not found in our repo. Proceeding with build."
            echo "::set-output name=SKIP_BUILD::false"
          else
            # Release exists, now check for the specific asset
            RELEASE_ASSETS=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/tags/$LATEST_MPV_TAG" | jq '.assets[].name')
            if echo "$RELEASE_ASSETS" | grep -q "$PKG_NAME"; then
              echo "macOS package already exists. Skipping build."
              echo "::set-output name=SKIP_BUILD::true"
            else
              echo "macOS package not found. Proceeding with build."
              echo "::set-output name=SKIP_BUILD::false"
            fi
          fi

      - name: Skip macOS build if package exists
        if: steps.check_macos_pkg.outputs.SKIP_BUILD == 'true'
        run: |
          echo "Build skipped."
      
      - name: Build macOS package
        id: build_mac_pkg
        if: steps.check_macos_pkg.outputs.SKIP_BUILD == 'false'
        run: |
          set -e
          
          SCRIPT_DIR=$(pwd)
          BUILD_DIR="$SCRIPT_DIR/local"
          FINAL_PKG_DIR="mac_pkg"
          mkdir -p "$BUILD_DIR"
          
          export PKG_CONFIG_PATH="$BUILD_DIR/lib/pkgconfig"
          
          echo "--- Building FFmpeg ---"
          git clone https://github.com/FFmpeg/FFmpeg.git
          cd FFmpeg
          unset CC CXX LDFLAGS CPPFLAGS
          ./configure \
              --prefix="$BUILD_DIR" \
              --disable-gpl --disable-nonfree --enable-shared --disable-static \
              --disable-ffprobe --disable-ffplay --disable-doc --disable-stripping
          gmake -j$(sysctl -n hw.ncpu)
          gmake install
          cd "$SCRIPT_DIR"
          
          echo "--- Building libplacebo ---"
          git clone https://github.com/haasn/libplacebo.git
          cd libplacebo
          git submodule update --init
          unset CC CXX LDFLAGS CPPFLAGS
          meson setup \
              --prefix="$BUILD_DIR" \
              --libdir="$BUILD_DIR/lib" \
              --includedir="$BUILD_DIR/include" \
              builddir
          ninja -C builddir
          ninja -C builddir install
          cd "$SCRIPT_DIR"
          
          echo "--- Building libunibreak ---"
          git clone https://github.com/adah1972/libunibreak.git
          cd libunibreak
          export PKG_CONFIG_PATH="$BUILD_DIR/lib/pkgconfig"
          unset CC CXX LDFLAGS CPPFLAGS
          ./autogen.sh
          ./configure \
              --prefix="$BUILD_DIR" \
              --libdir="$BUILD_DIR/lib" \
              --includedir="$BUILD_DIR/include"
          gmake -j$(sysctl -n hw.ncpu)
          gmake install
          cd "$SCRIPT_DIR"
          
          echo "--- Building libass ---"
          git clone https://github.com/libass/libass.git
          cd libass
          export PKG_CONFIG_PATH="$BUILD_DIR/lib/pkgconfig"
          unset CC CXX LDFLAGS CPPFLAGS
          ./autogen.sh
          ./configure \
              --prefix="$BUILD_DIR" \
              --libdir="$BUILD_DIR/lib" \
              --includedir="$BUILD_DIR/include" \
              --disable-static
          gmake -j$(sysctl -n hw.ncpu)
          gmake install
          cd "$SCRIPT_DIR"
          
          echo "--- Building mpv ---"
          git clone https://github.com/mpv-player/mpv.git
          cd mpv
          if [ -d "builddir" ]; then
              meson setup --wipe builddir
          fi
          meson setup \
              --prefix="$BUILD_DIR" \
              --libdir="$BUILD_DIR/lib" \
              --includedir="$BUILD_DIR/include" \
              -Dlibmpv=true \
              builddir
          ninja -C builddir
          ninja -C builddir install
          cd "$SCRIPT_DIR"

          echo "--- Creating self-contained package ---"
          LATEST_MPV_TAG=$(curl -s "https://api.github.com/repos/mpv-player/mpv/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          MPV_VERSION=$(echo "$LATEST_MPV_TAG" | sed 's/^v//')
          if [ -z "$MPV_VERSION" ]; then exit 1; fi

          mkdir -p "$FINAL_PKG_DIR/Contents/MacOS"
          mkdir -p "$FINAL_PKG_DIR/Contents/Frameworks"

          cp "$BUILD_DIR/bin/mpv" "$FINAL_PKG_DIR/Contents/MacOS/mpv-lgpl"

          for LIB in $(otool -L "$FINAL_PKG_DIR/Contents/MacOS/mpv-lgpl" | grep "$BUILD_DIR" | awk '{print $1}'); do
              cp "$LIB" "$FINAL_PKG_DIR/Contents/Frameworks/"
          done

          for LIB in "$FINAL_PKG_DIR/Contents/Frameworks"/*; do
              install_name_tool -id "@executable_path/../Frameworks/$(basename $LIB)" "$LIB"
              for LIB_DEP in $(otool -L "$LIB" | grep "$BUILD_DIR" | awk '{print $1}'); do
                  install_name_tool -change "$LIB_DEP" "@executable_path/../Frameworks/$(basename $LIB_DEP)" "$LIB"
              done
          done
          install_name_tool -id "@executable_path/../MacOS/mpv-lgpl" "$FINAL_PKG_DIR/Contents/MacOS/mpv-lgpl"
          for LIB_DEP in $(otool -L "$FINAL_PKG_DIR/Contents/MacOS/mpv-lgpl" | grep "$BUILD_DIR" | awk '{print $1}'); do
              install_name_tool -change "$LIB_DEP" "@executable_path/../Frameworks/$(basename $LIB_DEP)" "$FINAL_PKG_DIR/Contents/MacOS/mpv-lgpl"
          done

          tar -czf mpv-lgpl-${MPV_VERSION}-macos-arm64.tar.gz -C "$FINAL_PKG_DIR/.." $(basename "$FINAL_PKG_DIR")
          
          echo "package_path=mpv-lgpl-${MPV_VERSION}-macos-arm64.tar.gz" >> "$GITHUB_OUTPUT"

      - name: Upload macOS package as artifact
        if: steps.check_macos_pkg.outputs.SKIP_BUILD == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: mpv-lgpl-macos-arm64
          path: ${{ steps.build_mac_pkg.outputs.package_path }}

  release:
    needs: [build_linux, build_macos]
    runs-on: ubuntu-latest
    if: success()
    permissions:
      contents: write
      
    steps:
      - name: Check for new release
        id: check_version
        run: |
          LATEST_MPV_TAG=$(curl -s "https://api.github.com/repos/mpv-player/mpv/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          if [ -z "$LATEST_MPV_TAG" ]; then exit 1; fi
          echo "NEW_TAG=$LATEST_MPV_TAG" >> "$GITHUB_ENV"
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          
      - name: Create GitHub Release and Upload Assets
        id: release_and_upload
        run: |
          TAG_NAME="${{ env.NEW_TAG }}"
          REPO_NAME="${{ github.repository }}"
          GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}"
          RELEASE_RESPONSE=$(curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" -H "Content-Type: application/json" -d "{
            \"tag_name\": \"$TAG_NAME\",
            \"name\": \"Release $TAG_NAME\",
            \"draft\": false,
            \"prerelease\": false
          }" "https://api.github.com/repos/$REPO_NAME/releases")
          UPLOAD_URL=$(echo "$RELEASE_RESPONSE" | grep '"upload_url":' | sed -E 's/.*"([^"]+)".*/\1/' | sed 's/{?name,label}//')
          if [ -z "$UPLOAD_URL" ]; then
            echo "Error: Failed to create GitHub release or get upload URL."
            echo "$RELEASE_RESPONSE"
            exit 1
          fi
          
          for PACKAGE_FILE in ./artifacts/*/*; do
            echo "Uploading $(basename "$PACKAGE_FILE")..."
            curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/octet-stream" \
            --data-binary "@$PACKAGE_FILE" \
            "$UPLOAD_URL?name=$(basename "$PACKAGE_FILE")"
          done

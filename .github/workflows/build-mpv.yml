name: Build LGPL mpv Multi-Arch & macOS

on:
  schedule:
    - cron: '0 0 1 * *'
  workflow_dispatch:

jobs:
  build_linux:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix:
        arch: [amd64, arm64, armhf]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Fetch all tags
        run: git fetch --tags

      - name: Check if Linux package for current version exists
        id: check_linux_pkg
        run: |
          LATEST_MPV_TAG=$(curl -s "https://api.github.com/repos/mpv-player/mpv/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          PKG_NAME="mpv-lgpl_$(echo $LATEST_MPV_TAG | sed 's/^v//')-1_${{ matrix.arch }}.deb"
          
          RELEASE_ASSETS=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/tags/$LATEST_MPV_TAG" | jq -r 'if .assets then .assets[].name else "" end')
          
          if echo "$RELEASE_ASSETS" | grep -q "$PKG_NAME"; then
            echo "SKIP_BUILD=true" >> "$GITHUB_OUTPUT"
            echo "Linux package for ${{ matrix.arch }} already exists. Skipping build."
          else
            echo "SKIP_BUILD=false" >> "$GITHUB_OUTPUT"
            echo "Linux package for ${{ matrix.arch }} not found. Proceeding with build."
          fi
          
      - name: Skip Linux build if package exists
        if: steps.check_linux_pkg.outputs.SKIP_BUILD == 'true'
        run: |
          echo "Build skipped."

      - name: Set up QEMU
        if: matrix.arch != 'amd64' && steps.check_linux_pkg.outputs.SKIP_BUILD == 'false'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Install dependencies for ${{ matrix.arch }}
        if: steps.check_linux_pkg.outputs.SKIP_BUILD == 'false'
        run: |
          sudo apt update
          sudo apt install -y build-essential git meson ninja-build devscripts \
            libavcodec-dev libavfilter-dev libavformat-dev libswscale-dev libswresample-dev \
            libjpeg-dev libx11-dev libxext-dev libxinerama-dev libfreetype6-dev libfontconfig-dev \
            libfribidi-dev libharfbuzz-dev libass-dev

      - name: Build and install libplacebo for ${{ matrix.arch }}
        if: steps.check_linux_pkg.outputs.SKIP_BUILD == 'false'
        run: |
          git clone --depth=1 --recursive https://github.com/haasn/libplacebo.git
          cd libplacebo
          meson setup build
          sudo ninja -C build install

      - name: Get mpv source for ${{ matrix.arch }}
        if: steps.check_linux_pkg.outputs.SKIP_BUILD == 'false'
        run: git clone --depth=1 https://github.com/mpv-player/mpv.git

      - name: Configure and build mpv with LGPL option for ${{ matrix.arch }}
        if: steps.check_linux_pkg.outputs.SKIP_BUILD == 'false'
        run: |
          cd mpv
          meson setup build -Dgpl=false
          ninja -C build

      - name: Create deb package for ${{ matrix.arch }}
        id: create_package
        if: steps.check_linux_pkg.outputs.SKIP_BUILD == 'false'
        run: |
          MPV_TAG_FULL=$(curl -s "https://api.github.com/repos/mpv-player/mpv/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          MPV_VERSION=$(echo "$MPV_TAG_FULL" | sed 's/^v//')
          if [ -z "$MPV_VERSION" ]; then exit 1; fi
          DEB_PACKAGE_NAME="mpv-lgpl_${MPV_VERSION}-1_${{ matrix.arch }}.deb"
          DEB_DIR="debian_pkg"
          MPV_BUILD_DIR="mpv/build"
          mkdir -p "$DEB_DIR/usr/local/bin"
          mkdir -p "$DEB_DIR/usr/local/lib/${{ matrix.arch }}-linux-gnu"
          mkdir -p "$DEB_DIR/DEBIAN"
          cp "$MPV_BUILD_DIR/mpv" "$DEB_DIR/usr/local/bin/"
          cp "$MPV_BUILD_DIR/libmpv.so.2.5.0" "$DEB_DIR/usr/local/lib/${{ matrix.arch }}-linux-gnu/"
          (cd "$DEB_DIR/usr/local/lib/${{ matrix.arch }}-linux-gnu/" && ln -s libmpv.so.2.5.0 libmpv.so.2)
          (cd "$DEB_DIR/usr/local/lib/${{ matrix.arch }}-linux-gnu/" && ln -s libmpv.so.2 libmpv.so)
          cat > "$DEB_DIR/DEBIAN/control" <<EOF
          Package: mpv-lgpl
          Version: ${MPV_VERSION}
          Section: video
          Priority: optional
          Architecture: ${{ matrix.arch }}
          Maintainer: Your Name <your.email@example.com>
          Description: A media player LGPLv2.1 or later.
            mpv is a free and open-source command-line media player.
            This package is built with LGPLv2.1+ only files.
          Depends: libavcodec-dev, libavfilter-dev, libavformat-dev, libswresample-dev, libswscale-dev, libjpeg-dev, libx11-dev, libxext-dev, libxinerama-dev, libfreetype6-dev, libfontconfig-dev, libfribidi-dev, libharfbuzz-dev, libass-dev
          EOF
          dpkg-deb --build "$DEB_DIR" "$DEB_PACKAGE_NAME"
          echo "deb_path=$DEB_PACKAGE_NAME" >> "$GITHUB_OUTPUT"
      
      - name: Upload deb package as artifact
        if: steps.check_linux_pkg.outputs.SKIP_BUILD == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: mpv-lgpl-${{ matrix.arch }}
          path: ${{ steps.create_package.outputs.deb_path }}

  build_macos:
    runs-on: macos-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check if macOS package already exists
      id: check_macos_pkg
      run: |
        LATEST_MPV_TAG=$(curl -s "https://api.github.com/repos/mpv-player/mpv/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
        PKG_NAME="mpv-lgpl-$(echo $LATEST_MPV_TAG | sed 's/^v//')-macos-arm64.tar.gz"
        
        RELEASE_ASSETS=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/tags/$LATEST_MPV_TAG" | jq -r 'if .assets then .assets[].name else "" end')
        
        if echo "$RELEASE_ASSETS" | grep -q "$PKG_NAME"; then
          echo "SKIP_BUILD=true" >> "$GITHUB_OUTPUT"
          echo "macOS package already exists. Skipping build."
        else
          echo "SKIP_BUILD=false" >> "$GITHUB_OUTPUT"
          echo "macOS package not found. Proceeding with build."
        fi

    - name: Skip macOS build if package exists
      if: steps.check_macos_pkg.outputs.SKIP_BUILD == 'true'
      run: |
        echo "Build skipped."
        exit 0

    - name: Cache Homebrew dependencies
      id: cache-brew
      uses: actions/cache@v4
      with:
        path: /opt/homebrew
        key: ${{ runner.os }}-brew-deps-v1-${{ hashFiles('**/mpv.c') }}
        restore-keys: |
          ${{ runner.os }}-brew-deps-v1-

    - name: Install dependencies via Homebrew
      run: |
        brew install make meson ninja autoconf automake libtool pkg-config harfbuzz fontconfig freetype fribidi
    
    - name: Set Homebrew environment
      run: |
        eval "$(/opt/homebrew/bin/brew shellenv)"

    - name: Prepare build directory
      run: |
        mkdir local
        
    - name: Cache build artifacts
      id: cache-build
      uses: actions/cache@v4
      with:
        path: local
        key: ${{ runner.os }}-macos-build-deps-v2-${{ hashFiles('**/mpv.c') }}
        restore-keys: |
          ${{ runner.os }}-macos-build-deps-v2-

    - name: Build FFmpeg
      run: |
        set -e
        SCRIPT_DIR=$(pwd)
        BUILD_DIR="$SCRIPT_DIR/local"
        export PKG_CONFIG_PATH="$BUILD_DIR/lib/pkgconfig"
        echo "--- Building FFmpeg ---"
        git clone https://github.com/FFmpeg/FFmpeg.git
        cd FFmpeg
        unset CC CXX LDFLAGS CPPFLAGS
        ./configure \
            --prefix="$BUILD_DIR" \
            --disable-gpl --disable-nonfree --enable-shared --disable-static \
            --disable-ffprobe --disable-ffplay --disable-doc --disable-stripping
        gmake -j$(sysctl -n hw.ncpu)
        gmake install
        cd "$SCRIPT_DIR"

    - name: Build libplacebo
      run: |
        set -e
        SCRIPT_DIR=$(pwd)
        BUILD_DIR="$SCRIPT_DIR/local"
        export PKG_CONFIG_PATH="$BUILD_DIR/lib/pkgconfig"
        echo "--- Building libplacebo ---"
        git clone https://github.com/haasn/libplacebo.git
        cd libplacebo
        git submodule update --init
        unset CC CXX LDFLAGS CPPFLAGS
        meson setup \
            --prefix="$BUILD_DIR" \
            --libdir="$BUILD_DIR/lib" \
            --includedir="$BUILD_DIR/include" \
            builddir
        ninja -C builddir
        ninja -C builddir install
        cd "$SCRIPT_DIR"

    - name: Build libunibreak
      run: |
        set -e
        SCRIPT_DIR=$(pwd)
        BUILD_DIR="$SCRIPT_DIR/local"
        export PKG_CONFIG_PATH="$BUILD_DIR/lib/pkgconfig"
        echo "--- Building libunibreak ---"
        git clone https://github.com/adah1972/libunibreak.git
        cd libunibreak
        unset CC CXX LDFLAGS CPPFLAGS
        ./autogen.sh
        ./configure \
            --prefix="$BUILD_DIR" \
            --libdir="$BUILD_DIR/lib" \
            --includedir="$BUILD_DIR/include"
        gmake -j$(sysctl -n hw.ncpu)
        gmake install
        cd "$SCRIPT_DIR"

    - name: Build libass
      run: |
        set -e
        SCRIPT_DIR=$(pwd)
        BUILD_DIR="$SCRIPT_DIR/local"
        export PKG_CONFIG_PATH="$BUILD_DIR/lib/pkgconfig"
        echo "--- Building libass ---"
        git clone https://github.com/libass/libass.git
        cd libass
        unset CC CXX LDFLAGS CPPFLAGS
        ./autogen.sh
        ./configure \
            --prefix="$BUILD_DIR" \
            --libdir="$BUILD_DIR/lib" \
            --includedir="$BUILD_DIR/include" \
            --disable-static
        gmake -j$(sysctl -n hw.ncpu)
        gmake install
        cd "$SCRIPT_DIR"

    - name: Build jpeg-turbo
      run: |
        set -e
        SCRIPT_DIR=$(pwd)
        BUILD_DIR="$SCRIPT_DIR/local"
        export PKG_CONFIG_PATH="$BUILD_DIR/lib/pkgconfig"
        echo "--- Building jpeg-turbo ---"
        git clone https://github.com/libjpeg-turbo/libjpeg-turbo.git
        cd libjpeg-turbo
        unset CC CXX LDFLAGS CPPFLAGS
        mkdir build
        cd build
        cmake .. \
            -DCMAKE_INSTALL_PREFIX="$BUILD_DIR"
        cmake --build . -- -j$(sysctl -n hw.ncpu)
        cmake --install .
        cd "$SCRIPT_DIR"

    - name: Build little-cms2
      run: |
        set -e
        SCRIPT_DIR=$(pwd)
        BUILD_DIR="$SCRIPT_DIR/local"
        export PKG_CONFIG_PATH="$BUILD_DIR/lib/pkgconfig"
        echo "--- Building little-cms2 ---"
        git clone https://github.com/mm2/Little-CMS.git
        cd Little-CMS
        unset CC CXX LDFLAGS CPPFLAGS
        meson setup \
            --prefix="$BUILD_DIR" \
            --libdir="$BUILD_DIR/lib" \
            --includedir="$BUILD_DIR/include" \
            builddir
        ninja -C builddir
        ninja -C builddir install
        cd "$SCRIPT_DIR"

    - name: Build mpv
      run: |
        set -e
        SCRIPT_DIR=$(pwd)
        BUILD_DIR="$SCRIPT_DIR/local"
        export PKG_CONFIG_PATH="$BUILD_DIR/lib/pkgconfig"
        echo "--- Building mpv ---"
        git clone https://github.com/mpv-player/mpv.git
        cd mpv
        if [ -d "builddir" ]; then
            meson setup --wipe builddir
        fi
        meson setup \
            --prefix="$BUILD_DIR" \
            --libdir="$BUILD_DIR/lib" \
            --includedir="$BUILD_DIR/include" \
            -Dlibmpv=true \
            builddir
        ninja -C builddir
        ninja -C builddir install
        cd "$SCRIPT_DIR"

    - name: Create self-contained package
      id: build_mac_pkg
      run: |
        set -e
        SCRIPT_DIR=$(pwd)
        BUILD_DIR="$SCRIPT_DIR/local"
        
        echo "--- Creating self-contained package from $BUILD_DIR ---"
        LATEST_MPV_TAG=$(curl -s "https://api.github.com/repos/mpv-player/mpv/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
        MPV_VERSION=$(echo "$LATEST_MPV_TAG" | sed 's/^v//')
        if [ -z "$MPV_VERSION" ]; then exit 1; fi
        
        PACKAGE_NAME="mpv-lgpl-${MPV_VERSION}-macos-arm64.tar.gz"
        
        # localディレクトリを直接tar.gzに圧縮する
        tar -czf "$PACKAGE_NAME" -C "$BUILD_DIR" .
        
        echo "package_path=$PACKAGE_NAME" >> "$GITHUB_OUTPUT"

    - name: Upload macOS package as artifact
      if: steps.check_macos_pkg.outputs.SKIP_BUILD == 'false'
      uses: actions/upload-artifact@v4
      with:
        name: mpv-lgpl-macos-arm64
        path: ${{ steps.build_mac_pkg.outputs.package_path }}

  release:
    needs: [build_linux, build_macos]
    runs-on: ubuntu-latest
    if: success() && (needs.build_linux.result == 'success' || needs.build_macos.result == 'success')
    permissions:
      contents: write
    steps:
      - name: Check for new release
        id: check_version
        run: |
          LATEST_MPV_TAG=$(curl -s "https://api.github.com/repos/mpv-player/mpv/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          if [ -z "$LATEST_MPV_TAG" ]; then exit 1; fi
          echo "NEW_TAG=$LATEST_MPV_TAG" >> "$GITHUB_ENV"
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          
      - name: Create GitHub Release and Upload Assets
        id: release_and_upload
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          TAG_NAME="${{ env.NEW_TAG }}"
          REPO_NAME="${{ github.repository }}"
          
          # Check if the release already exists
          RELEASE_ID=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$REPO_NAME/releases/tags/$TAG_NAME" | jq -r '.id')
          if [ "$RELEASE_ID" != "null" ]; then
            echo "Release for tag $TAG_NAME already exists. Uploading assets to existing release."
            UPLOAD_URL=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$REPO_NAME/releases/$RELEASE_ID" | jq -r '.upload_url' | sed 's/{?name,label}//')
          else
            echo "Creating new release for tag $TAG_NAME."
            RELEASE_RESPONSE=$(curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" -H "Content-Type: application/json" -d "{
              \"tag_name\": \"$TAG_NAME\",
              \"name\": \"Release $TAG_NAME\",
              \"draft\": false,
              \"prerelease\": false
            }" "https://api.github.com/repos/$REPO_NAME/releases")
            UPLOAD_URL=$(echo "$RELEASE_RESPONSE" | jq -r '.upload_url' | sed 's/{?name,label}//')
          fi
          
          if [ "$UPLOAD_URL" == "null" ]; then
            echo "Error: Failed to get upload URL."
            exit 1;
          fi

          for PACKAGE_FILE in ./artifacts/*/*; do
            FILE_NAME=$(basename "$PACKAGE_FILE")
            echo "Uploading $FILE_NAME to $UPLOAD_URL"
            curl -s -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/octet-stream" \
              --data-binary "@$PACKAGE_FILE" \
              "$UPLOAD_URL?name=$FILE_NAME"
          done
